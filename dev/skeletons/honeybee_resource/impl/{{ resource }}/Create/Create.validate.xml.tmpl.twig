<?xml version="1.0" encoding="UTF-8"?>
<ae:configurations
    xmlns="http://agavi.org/agavi/config/parts/validators/1.0"
    xmlns:ae="http://agavi.org/agavi/config/global/envelope/1.0"
    parent="%core.module_dir%/{{ vendor }}_{{ package }}/config/validators.xml">
    <ae:configuration>
        <validators translation_domain="{{ vendor_prefix }}.{{ package_prefix }}.{{ resource_prefix }}.errors" method="write">
            <validator class="Honeygavi\Validator\AggregateRootTypeCommandValidator" name="invalid_task_data">
                <arguments base="create_{{ resource_prefix }}" />
                <ae:parameter name="aggregate_root_type">{{ vendor_prefix }}.{{ package_prefix }}.{{ resource_prefix }}</ae:parameter>
                <ae:parameter name="command_implementor">{{ vendor }}\{{ package }}\{{ resource }}\Model\Task\Create{{ resource }}\Create{{ resource }}Command</ae:parameter>
                <!--
                These attributes will be ignored. Alternatively you can use an attribute_whitelist
                to select which attributes are acceptable to your command payload.
                <ae:parameter name="attribute_blacklist">
                    <ae:parameter>auth_token</ae:parameter>
                    <ae:parameter>password_hash</ae:parameter>
                    <ae:parameter>token_expire_date</ae:parameter>
                </ae:parameter>
                -->
                <ae:parameter name="export">__command</ae:parameter>
                <error>Invalid command payload given.</error>
                <!-- 
                Set your error messages here on attribute paths
                <error for="email.invalid_format">Email has an invalid format.</error>
                <error for="ownername.min_length">Ownername is too short.</error>
                <error for="comments.comment.title.min_length">Comment-Title is too short.</error>
                 -->
            </validator>

            <validator class="Honeygavi\Validator\ResourceValidator" name="invalid_{{ resource_prefix }}_write" depends="create_{{ resource_prefix }}[invalid_payload]">
                <arguments base="create_{{ resource_prefix }}" />
                <ae:parameter name="resource_type">{{ vendor_prefix }}.{{ package_prefix }}.{{ resource_prefix }}</ae:parameter>
                <ae:parameter name="export">resource</ae:parameter>
                <ae:parameter name="create_fresh_resource">true</ae:parameter>
                <ae:parameter name="allow_default_payload">true</ae:parameter>
            </validator>
        </validators>
    </ae:configuration>
</ae:configurations>
