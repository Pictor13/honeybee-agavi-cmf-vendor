<?php

namespace {{ vendor_prefix }}\{{ package_prefix }}\Migration\RabbitMq;

use Honeybee\Infrastructure\Migration\MigrationInterface;
use Honeybee\Infrastructure\Migration\MigrationTargetInterface;
use Honeybee\Infrastructure\Migration\RabbitMqMigration;

class Migration_{{ timestamp }}_{{ name }} extends RabbitMqMigration
{
    public function getDescription($direction = MigrationInterface::MIGRATE_UP)
    {
        if ($direction === MigrationInterface::MIGRATE_UP) {
            return '{{ description }}';
        }
        return 'Reversal of {{ description }}';
    }

    public function isReversible()
    {
        return true;
    }

    public function up(MigrationTargetInterface $migration_target)
    {
        /*
         * Create a version list and domain events pipeline if this is the initial migration
         *
         * $this->createVersionList($migration_target, '{{ project_prefix }}.domain.version_list');
         * $this->createExchangePipeline($migration_target, '{{ project_prefix }}.domain.events');
         */

        /*
         * Create a queue and register on an exchange. Event bus events for an async channel will be sent 
         * as messages routed to the given queue.
         *
         * Add a configuration in jobs.xml and register the job to an event handler, then run a worker 
         * to process the messages according to configured retry/fail strategies.
         *
         * $this->createQueue($migration_target, '{{ project_prefix }}.domain.events', 'my.queue', 'my_routing_key');
         */
    }

    public function down(MigrationTargetInterface $migration_target)
    {
        // @todo implement
    }
}
