<?xml version="1.0" encoding="UTF-8"?>
<ae:configurations
    xmlns:ae="http://agavi.org/agavi/config/global/envelope/1.0"
    xmlns="http://agavi.org/agavi/config/parts/filters/1.0">
    <ae:configuration context="web">
        <filters>

            <filter name="HttpStatus405Filter" class="Honeygavi\Filter\HttpStatus405Filter">
                <ae:parameter name="module">Honeybee_Core</ae:parameter>
                <ae:parameter name="action">System/Error405</ae:parameter>
                <ae:parameter name="output_type">vnderrorjson</ae:parameter>
                <ae:parameter name="method">read</ae:parameter>
                <ae:parameter name="add_allow_header">true</ae:parameter>
                <ae:parameter name="debug">false</ae:parameter>
            </filter>

            <filter name="ModuleAssetsResponseFilter" class="Honeygavi\Filter\ModuleAssetsResponseFilter">
                <ae:parameter name="output_types">
                    <ae:parameter>html</ae:parameter>
                </ae:parameter>
            </filter>

            <filter name="FormPopulationFilter" class="AgaviFormPopulationFilter">
                <!-- run only on POSTs or other HTTP methods as well? -->
                <ae:parameter name="methods">
                    <ae:parameter>write</ae:parameter>
                </ae:parameter>
                <!-- on which output types should this filter run? only (X)HTML probably... -->
                <ae:parameter name="output_types">
                    <ae:parameter>html</ae:parameter>
                </ae:parameter>
                <!-- always HTML/UTF-8 to make e.g. html entities and empty script tags work -->
                <ae:parameter name="force_encoding">UTF-8</ae:parameter>
                <ae:parameter name="force_output_mode">html</ae:parameter>
                <!-- exceptions should be thrown and will then be logged anyways, thus we don't need logs here -->
                <ae:parameter name="log_parse_errors">false</ae:parameter>
                <!-- only fatal errors should be thrown as exception while
                     html5 elements like <article> and entities like &nbsp; should be fine -->
                <ae:parameter name="ignore_parse_errors">LIBXML_ERR_FATAL</ae:parameter>
                <!-- <ae:parameter name="savexml_options">LIBXML_NOEMPTYTAG</ae:parameter> -->
                <ae:parameter name="skip_xpaths">
                    <ae:parameter>//*[@data-fpf-ignore]//input</ae:parameter>
                    <ae:parameter>//div[contains(concat(' ', @class, ' '), 'hb-fpf-ignore')]//input</ae:parameter>
                </ae:parameter>
                <!-- css class name set on invalid input elements -->
                <ae:parameter name="error_class">invalid</ae:parameter>
                <!-- add error class to multiple locations in the markup -->
                <ae:parameter name="error_class_map">
                    <ae:parameter name="
                        self::${htmlnsPrefix}* |
                        self::${htmlnsPrefix}* |
                        self::${htmlnsPrefix}*/../..//${htmlnsPrefix}label |
                        self::${htmlnsPrefix}*/ancestor::${htmlnsPrefix}form |
                        self::${htmlnsPrefix}*/ancestor::${htmlnsPrefix}body/descendant::${htmlnsPrefix}div[contains(concat(' ', @class, ' '), 'page-errors')] |
                        self::${htmlnsPrefix}*/ancestor::${htmlnsPrefix}div[contains(concat(' ', @class, ' '), 'hb-tabs')] |
                        self::${htmlnsPrefix}*/ancestor::${htmlnsPrefix}div[contains(concat(' ', @class, ' '), 'hb-panel')]
                    ">invalid</ae:parameter>
                </ae:parameter>

                <!--
                    Possible error types and related parameter names:
                    - "field_error_messages": Errors on matching simple fields (the normal use case)
                    - "multi_field_error_messages": Errors that belong to more than one field (e.g. date validator with 3 fields)
                    - "error_messages": Errors that yield no match and those that have no corresponding field

                    First match from the sequence wins and execution stops. Thus if you want to have the error messages
                    multiple times in the markup use the same markup and add multiple xpath expressions combined via "|".

                    - xpath examples:
                        self::*/../ul[@class='errors'] |
                        self::${htmlnsPrefix}input[not(@type='checkbox' or @type='radio')] |
                        self::${htmlnsPrefix}input[(@type='checkbox' or @type='radio')] |
                        self::${htmlnsPrefix}select |
                        self::${htmlnsPrefix}textarea |
                        self::${htmlnsPrefix}*/ancestor::${htmlnsPrefix}form/descendant::${htmlnsPrefix}ul[contains(concat(' ', @class, ' '), 'hb-validation-messages')]

                    - ${htmlnsPrefix}: is either empty (for HTML) or something like "html:" for XHTML documents with xmlns="..." notation. Always use this, makes your code more bullet proof. XPath needs the namespaces when the document is namespaced
                    - location: can be any of "before", "after" or "child" (to insert as prev, next sibling or last child)
                    - a container groups all errors for one element
                    - markup: markup to display one specific error (can even be a DOMNode returning callable when parameters are dynamically set in the request :D)
                -->

                <ae:parameter name="field_error_messages">
                    <!-- <ae:parameter name="self::${htmlnsPrefix}*/ancestor::${htmlnsPrefix}form/descendant::${htmlnsPrefix}div[contains(concat(' ', @class, ' '), 'hb-validation-messages')]/${htmlnsPrefix}ul[contains(concat(' ', @class, ' '), 'errors')] | self::${htmlnsPrefix}*/../${htmlnsPrefix}ul[contains(concat(' ', @class, ' '), 'errors')]"> -->
                    <ae:parameter name="
                        self::${htmlnsPrefix}*/ancestor::${htmlnsPrefix}body/descendant::${htmlnsPrefix}ul[contains(concat(' ', @class, ' '), 'hb-errors__fields')] |
                        self::${htmlnsPrefix}*/../${htmlnsPrefix}ul[contains(concat(' ', @class, ' '), 'errors')]
                    ">
                        <ae:parameter name="location">child</ae:parameter>
                        <ae:parameter name="markup"><![CDATA[<li class="error specific fielderror-${elementName} is-visible" data-field-name="${elementName}" data-field-id="${elementId}"><label for="${elementId}"><span class="error__message">${errorMessage}</span></label></li>]]></ae:parameter>
                    </ae:parameter>
                </ae:parameter>

                <!--
                    everything that did not match any of the rules above, or errors that do not belong to a field â€“ it
                    can be an input, or a form, if the error does not belong to a field or didn't match anywhere else
                -->
                <ae:parameter name="error_messages">
                    <ae:parameter name="
                        self::${htmlnsPrefix}*/ancestor::${htmlnsPrefix}body/descendant::${htmlnsPrefix}ul[contains(concat(' ', @class, ' '), 'hb-errors__global')]
                    ">
                        <ae:parameter name="location">child</ae:parameter>
                        <!-- <ae:parameter name="container"><![CDATA[<ul class="sheet hb-validation-messages invalid">${errorMessages}</ul>]]></ae:parameter> -->
                        <ae:parameter name="markup"><![CDATA[<li class="error global"><span class="error__message">${errorMessage}</span></li>]]></ae:parameter>
                        <!-- <ae:parameter name="markup">Honeygavi\FpfToolkit::getDynamicMarkup</ae:parameter> -->
                    </ae:parameter>
                </ae:parameter>
            </filter>

        </filters>
    </ae:configuration>
</ae:configurations>
