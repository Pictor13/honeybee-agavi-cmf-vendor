@mixin hb-icon-base() {
    font-family: 'honeybee' !important;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: inherit;
    vertical-align: middle;

    /* Better Font Rendering =========== */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@mixin hb-icon($params) {
    $icon-name: $params;

    @if type-of($params) == map {

        @if map-has-key($params, 'icon-name') == true {
            $icon-name: map-get($params, 'icon-name');
        } @else {
            @warn "An 'icon-name' is required. It can be provided as a string or into a map of parameters.";
        }
    }

    @include hb-icon-base;

    // set icon
    $content: $icon-name;
    @if map-has-key($hb-icon, $icon-name) {
        $content: map-get($hb-icon, $icon-name);
    }
    content: "#{$content}" !important;
}

/*  Render the icon as pseudo-element and hide the parent container.

    ## Usage

    @include(
        $params: string icon-name, or map of parameters
            - icon-name:    name of the icon, as defined in the font 'vars' partial
            - pseudo:   'before'/'after'; choose the type of pseudo-element.
            - hide-content:   true/false; hide the content of the pseudo-element's parent.

                Note: if enabled then the positioning has to be manually done (eg. pseudo-element
                      with absolute position to middle/center and parent element with non-static position)

            - size: multiplier for base font-size (eg. 1.5).
    )
*/
@mixin hb-icon-pseudo-el($params: (pseudo: 'before')) {
    $pseudo: if(type-of($params) == map and map-has-key($params, 'pseudo'), map-get($params, 'pseudo'), 'before');
    $hide-content: if(type-of($params) == map and map-has-key($params, 'hide-content'), map-get($params, 'hide-content'), true);
    $size: if(type-of($params) == map and map-has-key($params, 'size'), map-get($params, 'size'), 1);

    @if $pseudo == "after" or $pseudo == "before" {
        &:#{$pseudo} {
            @include hb-icon($params);

            // center vertically/horizontally
            @if $hide-content {
                // keep in-flow
                display: table-cell;
                vertical-align: middle;
                text-align: center;

                @if $size != null {
                    font-size: #{$size}rem;
                }
            } @else {
                // custom position relative to parent (static|absolute|relative|fixed)
            }

            @content;
        }
    } @else {
        @warn 'Only after or before pseudo-element are allowed for icons!';
    }

    & {
        @if $hide-content {
            box-sizing: content-box;    // width as the pseudo-element
            display: table !important;  // allow easy alignment

            // hide content
            font-size: 0 !important;
            text-decoration: none;

            & > * { font-size: 1rem; }  // restore into children
        } @else {
            // custom positioning (non-static values for keeping pseudo-element relative)
        }
    }
}
