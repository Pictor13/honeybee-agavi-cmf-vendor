@mixin hb-icon-base() {
    font-family: 'honeybee' !important;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: inherit;
    vertical-align: middle;

    /* Better Font Rendering =========== */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;

    @content;
}

@mixin hb-icon($icon-name, $color: "auto") {
    @include hb-icon-base;

    $content: $icon-name;
    @if map-has-key($hb-icon, $icon-name) {
        $content: map-get($hb-icon, $icon-name);
    }

    content: "#{$content}" !important;
    @if $color != "auto" {
        color: $color;
    }

    @content;
}

/*  Render the icon as pseudo-element and hide the parent container.

    Note: pseudo-element icon styling should be more important than its parent styling.
          Use @content to overwrite conflicting rules with '!important'.
*/
@mixin hb-icon-pseudo-el($icon-name, $color: "auto", $hide-content: true, $pseudo: "before") {
    @if $pseudo == "after" or $pseudo == "before" {
        &:#{$pseudo} {
            @include hb-icon($icon-name, $color);
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            text-indent: 0;

            @content;
        }
    } @else {
        @warn 'Only after or before pseudo-element are allowed for icons!';
    }

    @if $hide-content {
        & {
            position: relative !important;
            display: inline-block !important;
            text-indent: -9999em !important;
            text-overflow: clip !important;
            overflow: hidden !important;
            white-space: nowrap !important;
            speak: none !important;
        }
    }
}
