/** #GRIDLAYOUT

   Typical usage:

   <div class="page-layout">
       <div class="main-box">
           primary content
       </div><!--
       --><div class="sidebar-box">
           secondary content
       </div>
   </div>

 – Remove whitespace via HTML comment between boxes.
 – The containers and boxes must not be used for styling. They are purely for laying out stuff.
 – Responsive widths should be defined via SCSS (```@extend %portable-1-of-2;```) for components
 – Widths and other layout classes like `layout--rev` must preceed the classnames of the layout
   and boxes as attribute suffix selectors are being used:

   <div class="layout--rev page-layout">
       <div class="lap-and-up-4/5 main-box">
           primary content
       </div><!--
       --><div class="lap-and-up-1/5 sidebar-box">
           secondary content
       </div>
   </div>

*/

//
// Setting the ```$hb-gridlayout-classname-suffix-(layout|layout-item)``` variables enables different
// naming schemes for grid layout containers and items:
//
// $hb-gridlayout-classname-suffix-layout: '-layout';
// $hb-gridlayout-classname-suffix-layout-item: '-layout__item';
//
// leads to:
//
// .page-layout
//     .main-layout__item
//     .sidebar-layout__item
//
//

$hb-gridlayout-namespace: $inuit-namespace !default;

// suffix used for class name to define a layout layout
$hb-gridlayout-classname-suffix-layout: '-layout' !default;

// suffix used for class name to define a layout item in the layout layout
$hb-gridlayout-classname-suffix-layout-item: '-box' !default;

// widths to generate
$hb-gridlayout-widths: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 !default;

// grid layout element
// .layout, //inuit already defines a .layout class, we don't need it here.
[class$="#{$hb-gridlayout-namespace}#{$hb-gridlayout-classname-suffix-layout}"] {
    @extend %#{$hb-gridlayout-namespace}layout;
}


    // grid item element within a grid layout element
    // the .box class can be used to quickly tryout the grid layout in templates
    .box,
    [class$="#{$hb-gridlayout-namespace}#{$hb-gridlayout-classname-suffix-layout-item}"] {
        @extend %#{$hb-gridlayout-namespace}layout__item;
    }

//
// generates a gridlayout width helper classes to size things, e.g. `2/3` or `desk-1/2` or `lap-and-up-3/4`
//
// this has been inspired by MIT licensed work of @EtienneMagnier
// github.com/emagnier/inuitcss.widths-generator and github.com/emagnier/inuitcss.widths-responsive-generator
//
// the generated placeholder selectors do not use !important to make them usable in SCSS @extend directives
// while still allowing markup overriding the widths via inuit trumps like `.u-1-of-2` or `desk-1/3` or `1/2`
//

@mixin hb-gridlayout-widths-generator($prefix, $wholes...) {
    $hb-gridlayout-widths-base-selectors: () !default !global;

    @each $whole in $wholes {
        $part: 1;

        /** widths – divides of #{$whole} */
        @while $part < $whole or ($whole == $part and $part == 1) {
            $part-selector: #{$part};
            $whole-selector: #{$whole};
            $width: $part / $whole * 100 + "%";
            $selector-content: #{$hb-gridlayout-namespace}#{$prefix}#{$part-selector}/#{$whole-selector}; // 1/2 or hb-u-1/2
            $selector: '[class~="#{$selector-content}"]';
            $selector-placeholder: '%#{$hb-gridlayout-namespace}#{$prefix}#{$part-selector}-of-#{$whole-selector}'; // 1-of-2

            // first uses of a specific width
            @if map-get($hb-gridlayout-widths-base-selectors, #{$hb-gridlayout-namespace} + #{$prefix} + $width) == null {
                $hb-gridlayout-widths-base-selectors: map-merge($hb-gridlayout-widths-base-selectors, (#{$hb-gridlayout-namespace} + #{$prefix} + $width: $selector)) !global;

                // @extend'ing %1/1 or the like breaks scss compilation :\
                @if ($prefix != '') {
                    #{$selector-placeholder} {
                        width: #{$width};
                    }
                }

                #{$selector} {
                    width: #{$width} !important;
                }
            }

            // extend a previous selector of the same width property
            @else {
                #{$selector} {
                    @extend #{map-get($hb-gridlayout-widths-base-selectors, #{$hb-gridlayout-namespace} + #{$prefix} + $width)};
                }
            }

            $part: $part + 1;
        }
    }
}

@include hb-gridlayout-widths-generator("", $hb-gridlayout-widths...);

// responsive width classes based on defined breakpoints in the inuit responsive settings
@each $breakpoint in $breakpoints {
    $alias: nth($breakpoint, 1);

    // exclude retina media-queries manually
    @if ($alias != "retina") {
        /** gridlayout widths for breakpoint #{str-slice($alias, 0, 1)}#{str-slice($alias, 2)} */
        @include media-query($alias) {
            @include hb-gridlayout-widths-generator($alias + '-', $hb-gridlayout-widths...);
        }
    }
}

// support for: <breakpoint-name>-layout--rev
@each $breakpoint in $breakpoints {
    $alias: nth($breakpoint, 1);

    /** gridlayout reversed order for breakpoint #{str-slice($alias, 0, 1)}#{str-slice($alias, 2)} */
    @include media-query($alias) {
        .#{$hb-gridlayout-namespace}#{$alias+'-'}layout--rev,
        %#{$hb-gridlayout-namespace}#{$alias+'-'}layout--rev {
            direction: rtl;
            text-align: left;

            > .#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > .#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item,
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item {
                direction: ltr;
                text-align: left;
            }
        }

    }
}

// support for: <breakpoint-name>-layout--auto
@each $breakpoint in $breakpoints {
    $alias: nth($breakpoint, 1);

    /** gridlayout auto width items for breakpoint #{str-slice($alias, 0, 1)}#{str-slice($alias, 2)} */
    @include media-query($alias) {
        .#{$hb-gridlayout-namespace}#{$alias+'-'}layout--auto,
        %#{$hb-gridlayout-namespace}#{$alias+'-'}layout--auto {
            > .#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > .#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item,
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item {
                width: auto;
            }
        }
    }
}

// support for: <breakpoint-name>-layout--center
@each $breakpoint in $breakpoints {
    $alias: nth($breakpoint, 1);

    /** gridlayout fill items from the center for breakpoint #{str-slice($alias, 0, 1)}#{str-slice($alias, 2)} */
    @include media-query($alias) {
        .#{$hb-gridlayout-namespace}#{$alias+'-'}layout--center,
        %#{$hb-gridlayout-namespace}#{$alias+'-'}layout--center {
            text-align: center;

            > .#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > .#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item,
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item {
                text-align: left;
            }
        }
    }
}

// support for: <breakpoint-name>-layout--right
@each $breakpoint in $breakpoints {
    $alias: nth($breakpoint, 1);

    /** gridlayout fill items from the right for breakpoint #{str-slice($alias, 0, 1)}#{str-slice($alias, 2)} */
    @include media-query($alias) {
        .#{$hb-gridlayout-namespace}#{$alias+'-'}layout--right,
        %#{$hb-gridlayout-namespace}#{$alias+'-'}layout--right {
            text-align: right;

            > .#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > .#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item,
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item {
                text-align: left;
            }
        }
    }
}

// support for: <breakpoint-name>-layout--middle
@each $breakpoint in $breakpoints {
    $alias: nth($breakpoint, 1);

    /** gridlayout vertical align items to the middle for breakpoint #{str-slice($alias, 0, 1)}#{str-slice($alias, 2)} */
    @include media-query($alias) {
        .#{$hb-gridlayout-namespace}#{$alias+'-'}layout--middle,
        %#{$hb-gridlayout-namespace}#{$alias+'-'}layout--middle {
            > .#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > .#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item,
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item {
                vertical-align: middle;
            }
        }
    }
}

// support for: <breakpoint-name>-layout--bottom
@each $breakpoint in $breakpoints {
    $alias: nth($breakpoint, 1);

    /** gridlayout vertical align items to the bottom for breakpoint #{str-slice($alias, 0, 1)}#{str-slice($alias, 2)} */
    @include media-query($alias) {
        .#{$hb-gridlayout-namespace}#{$alias+'-'}layout--bottom,
        %#{$hb-gridlayout-namespace}#{$alias+'-'}layout--bottom {
            > .#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}#{$hb-gridlayout-classname-suffix-layout-item},
            > .#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item,
            > %#{$hb-gridlayout-namespace}#{$alias+'-'}layout__item {
                vertical-align: bottom;
            }
        }
    }
}

// add breakpoint specific gutter changing classes as well?
// layout--tiny
// layout--small
// layout--large
// layout--huge
// layout--flush
